@inherits LayoutComponentBase

<div class="page">
    <div class="header mb-2">
        <MudAppBar Color="Color.Primary" Fixed="false">
            <MudGrid Class="appbar-grid" Spacing="2">
                <MudItem xs="4" Class="">
                    <MudMenu Label='@LayoutService.MenuLabel' FullWidth="true" Class="header-menu"
                        Color="Color.Secondary" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomLeft"
                        TransformOrigin="Origin.TopLeft">
                        <MudNavLink Href="/">Home</MudNavLink>
                        <MudNavLink Href="/contact">Contact</MudNavLink>
                        <MudNavLink Href="/about">About</MudNavLink>
                        <MudNavLink Href="/projects">Projects</MudNavLink>
                    </MudMenu>
                </MudItem>
                <MudItem xs="4" Class="">
                    <MudText Typo="Typo.body1" Align="Align.Center">
                        <div class="logo-container">
                            <div class="left">Lex</div>
                            <div class="right">Designs</div>
                        </div>
                    </MudText>
                </MudItem>
                <MudItem xs="4" Class="">
                    <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" />
                </MudItem>
            </MudGrid>

        </MudAppBar>

    </div>
    <main>
        @Body
    </main>
</div>


<MudThemeProvider @ref="@_mudThemeProvider" Theme="@LayoutService.CurrentTheme" />
<MudDialogProvider />
<MudSnackbarProvider />

@code {
    [Inject]
    public LayoutService LayoutService { get; set; }
    private MudThemeProvider _mudThemeProvider;

    protected override void OnInitialized()
    {
        LayoutService.MajorUpdateOccurred += LayoutServiceOnMajorUpdateOccurred;
        base.OnInitialized();
        LayoutService.SetBaseTheme(LexTheme.MainTheme());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            //await ApplyUserPreferences();
            StateHasChanged();
        }
    }

    // private async Task ApplyUserPreferences()
    //{
    // var defaultDarkMode = await _mudThemeProvider.GetSystemPreference();
    // await LayoutService.ApplyUserPreferences(false);
    //}

    public void Dispose()
    {
        LayoutService.MajorUpdateOccurred -= LayoutServiceOnMajorUpdateOccurred;
    }

    private void LayoutServiceOnMajorUpdateOccurred(object sender, EventArgs e) => StateHasChanged();

}


<style>
    .header {
        display: flex;
        justify-content: space-evenly;
        align-items: center;
    }

    .mud-button-root {
        margin-left: 2rem;
    }

    .logo-container {
        width: 90px;
    }

    .left {
        display: flex;
        justify-content: left;
        margin-bottom: -.7rem;
    }

    .right {
        font-family: 'DM Serif Display', serif;
        display: flex;
        justify-content: right;
    }

    .header-menu {
        width: 100px;
    }

    .appbar-grid {
        align-items: center;

    }

    .text-center {
        text-align: center !important;
    }

    .text-center>.mud-nav-link .mud-nav-link-text {
        text-align: center !important;
    }
</style>

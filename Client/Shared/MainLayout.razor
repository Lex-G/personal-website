@inherits LayoutComponentBase

<div class="page">
    <div class="header">
        <MudAppBar Color="Color.Primary" Fixed="false">
            <MudMenu Label='@LayoutService.MenuLabel' FullWidth="true" Class="header-menu" Color="Color.Secondary"
                Variant="Variant.Outlined" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
                <MudNavLink Href="/">Home</MudNavLink>
                <MudNavLink Href="/contact">Contact</MudNavLink>
                <MudNavLink Href="/about">About</MudNavLink>
            </MudMenu>
            <MudSpacer />
            <MudIconButton Icon="@Icons.Custom.Brands.GitHub" Color="Color.Inherit" />
        </MudAppBar>
    </div>
    <main>
        @Body
    </main>
</div>


<MudThemeProvider @ref="@_mudThemeProvider" Theme="@LayoutService.CurrentTheme" />
<MudDialogProvider />
<MudSnackbarProvider />

@code {
    [Inject]
    public LayoutService LayoutService { get; set; }
    private MudThemeProvider _mudThemeProvider;

    protected override void OnInitialized()
    {
        LayoutService.MajorUpdateOccurred += LayoutServiceOnMajorUpdateOccurred;
        base.OnInitialized();
        LayoutService.SetBaseTheme(LexTheme.MainTheme());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            //await ApplyUserPreferences();
            StateHasChanged();
        }
    }

    // private async Task ApplyUserPreferences()
    //{
    // var defaultDarkMode = await _mudThemeProvider.GetSystemPreference();
    // await LayoutService.ApplyUserPreferences(false);
    //}

    public void Dispose()
    {
        LayoutService.MajorUpdateOccurred -= LayoutServiceOnMajorUpdateOccurred;
    }

    private void LayoutServiceOnMajorUpdateOccurred(object sender, EventArgs e) => StateHasChanged();

}


<style>
    .header-menu {
        width: 250px;
    }
</style>
